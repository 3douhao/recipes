{"version":3,"sources":["../node_modules/vanilla-router/index.js","components/error.js","router.js","app.js"],"names":["color","title","message","el","document","getElementById","recipes","id","router","Router","mode","page404","path","html","innerHTML","addEventListener","detail","deleteRecipe","returnRecipes","createRecipe","window","add","map","recipe","join","filter","x","navigateTo","location","pathname","link","querySelector","classList","links","querySelectorAll","forEach","event","preventDefault","target","currentTarget","remove","href","getAttribute","substr","lastIndexOf"],"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","file":"app.c328ef1a.map","sourceRoot":"../src","sourcesContent":["/* global window, module */\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n            global.Router = factory()\n}(this, (function () {\n\n    /**\n     * Router\n     *\n     * @version: 1.2.7\n     * @author Graidenix\n     *\n     * @constructor\n     *\n     * @param {object} options\n     * @returns {Router}\n     */\n    function Router(options) {\n        var settings = this._getSettings(options);\n\n\n        this.notFoundHandler = settings.page404;\n        this.mode = (!window.history || !window.history.pushState) ? \"hash\" : settings.mode;\n        this.root = settings.root === \"/\" ? \"/\" : \"/\" + this._trimSlashes(settings.root) + \"/\";\n        this.beforeHook = settings.hooks.before;\n        this.securityHook = settings.hooks.secure;\n\n        this.routes = [];\n        if (settings.routes && settings.routes.length > 0) {\n            var _this = this;\n            settings.routes.forEach(function (route) {\n                _this.add(route.rule, route.handler, route.options);\n            });\n        }\n\n        this._pageState = null;\n        this._currentPage = null;\n        this._skipCheck = false;\n        this._action = null;\n\n        if (this.mode === \"hash\") {\n            this._historyStack = [];\n            this._historyIdx = 0;\n            this._historyState = \"add\"\n        }\n\n        return this;\n    }\n\n    /**\n     * Define Router Page\n     *\n     * @param {string} uri\n     * @param {object} query\n     * @param {Array} params\n     * @param {object} state\n     * @param {object} options\n     *\n     * @constructor\n     */\n    Router.Page = function (uri, query, params, state, options) {\n        this.uri = uri || \"\";\n        this.query = query || {};\n        this.params = params || [];\n        this.state = state || null;\n        this.options = options || {};\n    };\n\n    /**\n     * Sanitize options and add default values\n     *\n     * @param {object} options\n     * @returns {object}\n     * @private\n     */\n    Router.prototype._getSettings = function (options) {\n        var settings = {};\n        var defaults = {\n            routes: [],\n            mode: \"history\",\n            root: \"/\",\n            hooks: {\n                \"before\": function () {\n                },\n                \"secure\": function () {\n                    return true;\n                }\n            },\n            page404: function (page) {\n                console.error({\n                    page: page,\n                    message: \"404. Page not found\"\n                });\n            }\n        };\n\n        options = options || {};\n        [\"routes\", \"mode\", \"root\", \"page404\"].forEach(function (key) {\n            settings[key] = options[key] || defaults[key];\n        });\n\n        settings.hooks = Object.assign({}, defaults.hooks, options.hooks || {});\n\n        return settings;\n    };\n\n    /**\n     * Get URI for Router \"history\" mode\n     *\n     * @private\n     * @returns {string}\n     */\n    Router.prototype._getHistoryFragment = function () {\n        var fragment = decodeURI(window.location.pathname);\n        if (this.root !== \"/\") {\n            fragment = fragment.replace(this.root, \"\");\n        }\n        return this._trimSlashes(fragment);\n    };\n\n    /**\n     * Get URI for router \"hash\" mode\n     *\n     * @private\n     * @returns {string}\n     */\n    Router.prototype._getHashFragment = function () {\n        var hash = window.location.hash.substr(1).replace(/(\\?.*)$/, \"\");\n        return this._trimSlashes(hash);\n    };\n\n    /**\n     * Get current URI\n     *\n     * @private\n     * @returns {string}\n     */\n    Router.prototype._getFragment = function () {\n        if (this.mode === \"history\") {\n            return this._getHistoryFragment();\n        } else {\n            return this._getHashFragment();\n        }\n    };\n\n    /**\n     * Trim slashes for path\n     *\n     * @private\n     * @param {string} path\n     * @returns {string}\n     */\n    Router.prototype._trimSlashes = function (path) {\n        if (typeof path !== \"string\") {\n            return \"\";\n        }\n        return path.toString().replace(/\\/$/, \"\").replace(/^\\//, \"\");\n    };\n\n    /**\n     * 404 Page Handler\n     *\n     * @private\n     */\n    Router.prototype._page404 = function (path) {\n        this._currentPage = new Router.Page(path);\n        this.notFoundHandler(path);\n    };\n\n    /**\n     * Convert the string route rule to RegExp rule\n     *\n     * @param {string} route\n     * @returns {RegExp}\n     * @private\n     */\n    Router.prototype._parseRouteRule = function (route) {\n        if (typeof route !== \"string\") {\n            return route;\n        }\n        var uri = this._trimSlashes(route);\n        var rule = uri\n            .replace(/([\\\\\\/\\-\\_\\.])/g, \"\\\\$1\")\n            .replace(/\\{[a-zA-Z]+\\}/g, \"(:any)\")\n            .replace(/\\:any/g, \"[\\\\w\\\\-\\\\_\\\\.]+\")\n            .replace(/\\:word/g, \"[a-zA-Z]+\")\n            .replace(/\\:num/g, \"\\\\d+\");\n\n        return new RegExp(\"^\" + rule + \"$\", \"i\");\n    };\n\n    /**\n     * Parse query string and return object for it\n     *\n     * @param {string} query\n     * @returns {object}\n     * @private\n     */\n    Router.prototype._parseQuery = function (query) {\n        var _query = {};\n        if (typeof query !== \"string\") {\n            return _query;\n        }\n\n        if (query[0] === \"?\") {\n            query = query.substr(1);\n        }\n\n        this._queryString = query;\n        query.split(\"&\").forEach(function (row) {\n            var parts = row.split(\"=\");\n            if (parts[0] !== \"\") {\n                if (parts[1] === undefined) {\n                    parts[1] = true;\n                }\n                _query[decodeURIComponent(parts[0])] = parts[1];\n            }\n        });\n        return _query;\n    };\n\n    /**\n     * Get query for `history` mode\n     *\n     * @returns {Object}\n     * @private\n     */\n    Router.prototype._getHistoryQuery = function () {\n        return this._parseQuery(window.location.search);\n    };\n\n    /**\n     * Get query for `hash` mode\n     *\n     * @returns {Object}\n     * @private\n     */\n    Router.prototype._getHashQuery = function () {\n        var index = window.location.hash.indexOf(\"?\");\n        var query = (index !== -1) ? window.location.hash.substr(index) : \"\";\n        return this._parseQuery(query);\n    };\n\n    /**\n     * Get query as object\n     *\n     * @private\n     * @returns {Object}\n     */\n    Router.prototype._getQuery = function () {\n        if (this.mode === \"history\") {\n            return this._getHistoryQuery();\n        } else {\n            return this._getHashQuery();\n        }\n    };\n\n    /**\n     * Add route to routes list\n     *\n     * @param {string|RegExp} rule\n     * @param {function} handler\n     * @param {{}} options\n     * @returns {Router}\n     */\n    Router.prototype.add = function (rule, handler, options) {\n        this.routes.push({\n            rule: this._parseRouteRule(rule),\n            handler: handler,\n            options: options\n        });\n        return this;\n    };\n\n    /**\n     * Remove a route from routes list\n     *\n     * @param param\n     * @returns {Router}\n     */\n    Router.prototype.remove = function (param) {\n        var _this = this;\n        if (typeof param === \"string\") {\n            param = this._parseRouteRule(param).toString();\n        }\n        this.routes.some(function (route, i) {\n            if (route.handler === param || route.rule.toString() === param) {\n                _this.routes.splice(i, 1);\n                return true;\n            }\n            return false;\n        });\n\n        return this;\n    };\n\n    /**\n     * Reset the state of Router\n     *\n     * @returns {Router}\n     */\n    Router.prototype.reset = function () {\n        this.routes = [];\n        this.mode = null;\n        this.root = \"/\";\n        this._pageState = {};\n        this.removeUriListener();\n\n        return this;\n    };\n\n    /**\n     * Add current page in history stack\n     * @private\n     */\n    Router.prototype._pushHistory = function () {\n        var _this = this,\n            fragment = this._getFragment();\n\n        if (this.mode === \"hash\") {\n            if (this._historyState === \"add\") {\n                if (this._historyIdx !== this._historyStack.length - 1) {\n                    this._historyStack.splice(this._historyIdx + 1);\n                }\n\n                this._historyStack.push({\n                    path: fragment,\n                    state: _this._pageState\n                });\n\n                this._historyIdx = this._historyStack.length - 1;\n            }\n            this._historyState = \"add\";\n        }\n    };\n\n    /**\n     *\n     * @param asyncRequest boolean\n     * @returns {PromiseResult<boolean> | boolean}\n     * @private\n     */\n    Router.prototype._unloadCallback = function (asyncRequest) {\n        var result;\n\n        if (this._skipCheck) {\n            return asyncRequest ? Promise.resolve(true) : true;\n        }\n\n        if (this._currentPage && this._currentPage.options && this._currentPage.options.unloadCb) {\n            result = this._currentPage.options.unloadCb(this._currentPage, asyncRequest);\n            if (!asyncRequest || result instanceof Promise) {\n                return result;\n            }\n            return result ? Promise.resolve(result) : Promise.reject(result);\n        } else {\n            return asyncRequest ? Promise.resolve(true) : true;\n        }\n    };\n\n    /**\n     * Check if router has the action for current path\n     *\n     * @returns {boolean}\n     * @private\n     */\n    Router.prototype._findRoute = function () {\n        var _this = this,\n            fragment = this._getFragment();\n\n        return this.routes.some(function (route) {\n            var match = fragment.match(route.rule);\n            if (match) {\n                match.shift();\n                var query = _this._getQuery();\n                var page = new Router.Page(fragment, query, match, _this._pageState, route.options);\n\n                if (!_this.securityHook(page)) {\n                    return false;\n                }\n\n                _this._currentPage = page;\n                if (_this._skipCheck) {\n                    _this._skipCheck = false;\n                    return true;\n                }\n                _this.beforeHook(page);\n                route.handler.apply(page, match);\n                _this._pageState = null;\n\n                window.onbeforeunload = function (ev) {\n                    if (_this._unloadCallback(false)) {\n                        return;\n                    }\n                    ev.returnValue = true;\n                    return true;\n                };\n\n                return true;\n            }\n            return false;\n        });\n    };\n\n    /**\n     *\n     */\n    Router.prototype._treatAsync = function () {\n        var result;\n\n        result = this._currentPage.options.unloadCb(this._currentPage, true);\n        if (!(result instanceof Promise)) {\n            result = result ? Promise.resolve(result) : Promise.reject(result);\n        }\n\n        result\n            .then(this._processUri.bind(this))\n            .catch(this._resetState.bind(this));\n    };\n\n    /**\n     *\n     * @private\n     */\n    Router.prototype._resetState = function () {\n        this._skipCheck = true;\n        this.navigateTo(this._current, this._currentPage.state, true);\n    };\n\n    /**\n     * Replace current page with new one\n     */\n    Router.prototype._processUri = function () {\n        var fragment = this._getFragment(),\n            found;\n\n        this._current = fragment;\n        this._pushHistory();\n\n        found = this._findRoute.call(this);\n        if (!found) {\n            this._page404(fragment);\n        }\n    };\n\n    /**\n     * Check the URL and execute handler for its route\n     *\n     * @returns {Router}\n     */\n    Router.prototype.check = function () {\n        if (this._skipCheck) return this;\n\n        // if page has unload cb treat as promise\n        if (this._currentPage && this._currentPage.options && this._currentPage.options.unloadCb) {\n            this._treatAsync();\n        } else {\n            this._processUri();\n        }\n        return this;\n    };\n\n    /**\n     * Add the URI listener\n     *\n     * @returns {Router}\n     */\n    Router.prototype.addUriListener = function () {\n        if (this.mode === \"history\") {\n            window.onpopstate = this.check.bind(this);\n        } else {\n            window.onhashchange = this.check.bind(this);\n        }\n\n        return this;\n    };\n\n    /**\n     * Remove the URI listener\n     *\n     * @returns {Router}\n     */\n    Router.prototype.removeUriListener = function () {\n        window.onpopstate = null;\n        window.onhashchange = null;\n        return this;\n    };\n\n    /**\n     * Redirect to a page with replace state\n     *\n     * @param {string} path\n     * @param {object} state\n     * @param {boolean} silent\n     *\n     * @returns {Router}\n     */\n    Router.prototype.redirectTo = function (path, state, silent) {\n        path = this._trimSlashes(path) || \"\";\n        this._pageState = state || null;\n        this._skipCheck = !!silent;\n\n        if (this.mode === \"history\") {\n            history.replaceState(state, null, this.root + this._trimSlashes(path));\n            return this.check();\n        } else {\n            this._historyIdx--;\n            window.location.hash = path;\n        }\n        return this;\n    };\n\n    /**\n     * Navigate to a page\n     *\n     * @param {string} path\n     * @param {object} state\n     * @param {boolean} silent\n     *\n     * @returns {Router}\n     */\n    Router.prototype.navigateTo = function (path, state, silent) {\n        path = this._trimSlashes(path) || \"\";\n        this._pageState = state || null;\n        this._skipCheck = !!silent;\n\n        if (this.mode === \"history\") {\n            history.pushState(state, null, this.root + this._trimSlashes(path));\n            return this.check();\n        } else {\n            window.location.hash = path;\n        }\n        return this;\n    };\n\n    /**\n     * Refresh page with recall route handler\n     * @returns {Router}\n     */\n    Router.prototype.refresh = function () {\n        if (!this._currentPage) {\n            return this;\n        }\n        var path = this._currentPage.uri + \"?\" + this._queryString;\n        return this.navigateTo(path, this._currentPage.state);\n    };\n\n    /**\n     * Go Back in browser history\n     * Simulate \"Back\" button\n     *\n     * @returns {Router}\n     */\n    Router.prototype.back = function () {\n        if (this.mode === \"history\") {\n            window.history.back();\n            return this;\n        }\n\n        return this.go(this._historyIdx - 1);\n    };\n\n    /**\n     * Go Forward in browser history\n     * Simulate \"Forward\" button\n     *\n     * @returns {Router}\n     */\n    Router.prototype.forward = function () {\n        if (this.mode === \"history\") {\n            window.history.forward();\n            return this;\n        }\n\n        return this.go(this._historyIdx + 1);\n    };\n\n    /**\n     * Go to a specific history page\n     *\n     * @param {number} count\n     * @returns {Router}\n     */\n    Router.prototype.go = function (count) {\n        if (this.mode === \"history\") {\n            window.history.go(count);\n            return this;\n        }\n\n        var page = this._historyStack[count];\n        if (!page) {\n            return this;\n        }\n\n        this._historyIdx = count;\n        this._historyState = \"hold\";\n        return this.navigateTo(page.path, page.state);\n    };\n\n    return Router;\n})));","export default (color, title, message) => `\n  <div class=\"ui ${color} inverted segment\" style=\"height:250px;\">\n  <br>\n    <h2 class=\"ui center aligned icon header\">\n      <i class=\"exclamation triangle icon\"></i>\n      <div class=\"content\">\n        ${title}\n      <div class=\"sub header\">${message}</div>\n      </div>\n    </h2>\n  </div>`;\n","import Router from 'vanilla-router';\nimport error from './components/error';\nconst el = document.getElementById('app');\nlet recipes = [\n  { id: 1, title: 'Cheese' },\n  { id: 1, title: 'Pasta' },\n  { id: 1, title: 'Bread' },\n  { id: 1, title: 'Salami' }\n];\n// Router Declaration\nconst router = new Router({\n  mode: 'history',\n  page404: path => {\n    const html = error(\n      'yellow',\n      'Error 404 - Page NOT Found!',\n      `The path '/${path}' does not exist on this site`\n    );\n    el.innerHTML = html;\n  }\n});\ndocument.addEventListener('delete', ({ detail }) => {\n  recipes = deleteRecipe(detail);\n  el.innerHTML = returnRecipes();\n});\ndocument.addEventListener('create', ({ detail }) => {\n  recipes = createRecipe(detail);\n  el.innerHTML = returnRecipes();\n});\nwindow.addEventListener('load', () => {\n  router.add('/', () => {\n    el.innerHTML = returnRecipes();\n  });\n  router.add('/create', () => {\n    el.innerHTML = `<create-recipe></create-recipe>`;\n  });\n});\n\nconst returnRecipes = () => `\n<recipe-list>\n  <div slot=\"recipes\">\n  ${recipes\n    .map(recipe => `<recipe-item title=\"${recipe.title}\"></recipe-item>`)\n    .join('')}</div>\n</recipe-list>`;\n\nconst deleteRecipe = title => recipes.filter(x => x.title !== title);\n\nconst createRecipe = title => (recipes = [...recipes, { title }]);\n\nexport { router };\n","import { router } from './router';\nwindow.addEventListener('load', () => {\n  // Navigate app to current url\n  router.navigateTo(window.location.pathname);\n\n  // Highlight Active Menu on Refresh/Page Reload\n  const link = document.querySelector(`a[href$='${window.location.pathname}']`);\n  link.classList.add('active');\n\n  const links = document.querySelectorAll('a');\n  links.forEach(link => {\n    link.addEventListener('click', event => {\n      // Block browser page load\n      event.preventDefault();\n\n      // Highlight Active Menu on Click\n      const target = event.currentTarget;\n      document.querySelector('.active').classList.remove('active');\n      target.classList.add('active');\n\n      // Navigate to clicked url\n      const href = target.getAttribute('href');\n      const path = href.substr(href.lastIndexOf('/'));\n      router.navigateTo(path);\n    });\n  });\n});\n"]}